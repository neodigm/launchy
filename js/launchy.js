var Launchy =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!************************!*\
  !*** ./src/launchy.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Launchy = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\naunchy! ðŸš€ â€” An Accessible Modal Window\nneatures include:\nn launch, shift focus to the modal window container\nhe modal window is described by the modal heading\nrap keyboard focus within the modal when active/visible\nlose the window on `esc` key press\nlose the window on overlay `click`\net keyboard focus back to the launcher element on window close\nransparent border for Windows High Contrast themes\nnheck out the GitHub repo for more information: https://github.com/svinkle/launchy\nnauthor Scott Vinkle <svinkle@gmail.com>\nversion 0.8.0\nlicense MIT\nn\n__webpack_require__(/*! wicg-inert */ 1);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// HTML elements\nvar htmlElements = {\n    launchModal: 'a',\n    closeModal: 'a',\n    modalWindow: 'div',\n    modalContent: 'div',\n    modalOverlay: 'div',\n    modalTitle: 'h2'\n};\n\n// CSS classes\nvar classes = {\n    modalLaunchLink: 'launchy__launch-link',\n    modalCloseLink: 'launchy__close-link',\n    modalWindow: 'launchy__window',\n    modalContent: 'launchy__content',\n    modalOverlay: 'launchy__overlay',\n    modalTitle: 'launchy__title',\n    modalWindowIsVisible: 'launchy__window--is-visible',\n    modalOverlayIsVisible: 'launchy__overlay--is-visible'\n};\n\n// Data attributes\nvar data = {\n    launchyAriaHidden: 'data-launchy-aria-hidden',\n    launchyFocusable: 'data-launchy-focusable',\n    launchyTabIndex: 'data-launchy-tabindex',\n    launchyText: 'data-launchy-text',\n    launchyTitle: 'data-launchy-title',\n    launchyCustom: {\n        close: 'data-launchy-close',\n        refocus: 'data-launchy-refocus'\n    }\n};\n\n// Keys\nvar keysCodes = {\n    'Escape': 27\n};\n\n// Selectors\nvar selectors = {\n    launchyElements: '[data-launchy]',\n    launchyControl: 'launchy-control-',\n    launchyDialog: 'launchy-dialog-',\n    launchyCloseControl: 'launchy-close-control-',\n    modalOverlay: 'modal-overlay-',\n    modalTitle: 'modal-title-'\n};\n\n// Strings\nvar strings = {\n    modalClose: 'Close modal window!',\n    modalCloseHTML: '<span aria-hidden=\"true\">&times;</span>',\n    modalError: 'Launchy container must have a `data-launchy-text` attribute!',\n    modalErrorEmpty: 'Launchy container `data-launchy-text` attribute cannot be empty!',\n    modalWarning: 'Launchy container should have a `data-launchy-title` attribute, or be sure to supply your own heading! (Prefereably an `<h2>`.)',\n    refocusElemNotFound: 'Refocus element not found!'\n};\n\n// Unique identifier\nvar launchyId = 0;\n\nvar Launchy = function () {\n    function Launchy(params) {\n        _classCallCheck(this, Launchy);\n\n        // https://www.npmjs.com/package/focusable\n        this.focusable = __webpack_require__(/*! focusable */ 2);\n\n        // Unique identifier for each instance\n        this.launchyId = launchyId;\n\n        // Flags and other objects to be used later\n        this.hasTitle = params.title ? true : false;\n        this.modalIsVisible = false;\n        this.activeElement = null;\n        this.shiftKeyIsPressed = false;\n        this.allFocusable = null;\n        this.firstFocusable = null;\n        this.lastFocusable = null;\n        this.domFocusable = null;\n\n        // Setup all the things\n        this.prepareFocusable();\n        this.createElements(params);\n        this.insertElements(params);\n        this.setupEventListeners();\n\n        // Increment identifier\n        launchyId++;\n    }\n\n    /**\n     * Add a data attribute on all existing focusable elements. Used in\n     * `modalHide()` and `modalShow()` to make elements \"inert\" -- prevent\n     * screen readers from reaching these elements when using other means\n     * of navigation (arrow keys, for example.)\n     *\n     * @return {null}\n     */\n\n\n    _createClass(Launchy, [{\n        key: 'prepareFocusable',\n        value: function prepareFocusable() {\n\n            // Select all focusable elements in the DOM\n            this.domFocusable = document.querySelectorAll(this.focusable);\n\n            // For each focusable element in the DOM, set the data attribute\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = Array.from(this.domFocusable)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var domElement = _step.value;\n\n                    var addAttributes = false;\n\n                    // Check to see if the element already has `tabindex=\"-1\"`\n                    if (!domElement.hasAttribute('tabindex') || domElement.getAttribute('tabindex') !== '-1') {\n                        domElement.setAttribute(data.launchyTabIndex, true);\n                        addAttributes = true;\n                    }\n\n                    // Check to see if the element already has `aria-hidden=\"true\"`\n                    if (!domElement.hasAttribute('aria-hidden') || domElement.getAttribute('aria-hidden') !== 'true') {\n                        domElement.setAttribute(data.launchyAriaHidden, true);\n                        addAttributes = true;\n                    }\n\n                    // Only add this element to the set if the above conditions are met\n                    if (addAttributes) {\n                        domElement.setAttribute(data.launchyFocusable, true);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Create all the required elements for Launchy to function.\n         *\n         * @param {Object} params Instance parameters\n         * @return {null}\n         */\n\n    }, {\n        key: 'createElements',\n        value: function createElements(params) {\n\n            // Launch control\n            this.launchControl = document.createElement(htmlElements.launchModal);\n            this.launchControl.id = '' + selectors.launchyControl + this.launchyId;\n            this.launchControl.href = '#' + selectors.launchyDialog + this.launchyId;\n            this.launchControl.classList.add(classes.modalLaunchLink);\n            this.launchControl.setAttribute('aria-haspopup', 'dialog');\n            this.launchControl.textContent = params.text;\n\n            // Close control\n            this.closeControl = document.createElement(htmlElements.closeModal);\n            this.closeControl.id = '' + selectors.launchyCloseControl + this.launchyId;\n            this.closeControl.href = '#' + selectors.launchyControl + this.launchyId;\n            this.closeControl.classList.add(classes.modalCloseLink);\n            this.closeControl.setAttribute('aria-label', strings.modalClose);\n            this.closeControl.innerHTML = strings.modalCloseHTML;\n\n            // Modal window\n            this.modalWindow = document.createElement(htmlElements.modalWindow);\n            this.modalWindow.id = '' + selectors.launchyDialog + this.launchyId;\n            this.modalWindow.classList.add(classes.modalWindow);\n            this.modalWindow.setAttribute('tabindex', -1);\n            this.modalWindow.setAttribute('role', 'dialog');\n            this.modalWindow.setAttribute('aria-modal', true);\n\n            if (this.hasTitle) {\n                this.modalWindow.setAttribute('aria-labelledby', '' + selectors.modalTitle + this.launchyId);\n            }\n\n            // Modal overlay\n            this.modalOverlay = document.createElement(htmlElements.modalOverlay);\n            this.modalOverlay.id = '' + selectors.modalOverlay + this.launchyId;\n            this.modalOverlay.classList.add(classes.modalOverlay);\n            this.modalOverlay.setAttribute('tabindex', 0);\n\n            // Modal content\n            this.modalContent = document.createElement(htmlElements.modalContent);\n            this.modalContent.classList.add(classes.modalContent);\n\n            // Modal title\n            if (this.hasTitle) {\n                this.modalTitle = document.createElement(htmlElements.modalTitle);\n                this.modalTitle.id = '' + selectors.modalTitle + this.launchyId;\n                this.modalTitle.classList.add(classes.modalTitle);\n                this.modalTitle.textContent = params.title;\n            }\n        }\n\n        /**\n         * Insert Launchy elements into the DOM.\n         *\n         * @param {Object} params instance parameters\n         * @return {null}\n         */\n\n    }, {\n        key: 'insertElements',\n        value: function insertElements(params) {\n\n            // Select all focusable elements in the modal content\n            var domFocusable = params.target.querySelectorAll(this.focusable);\n\n            // Launch control\n            params.target.parentNode.insertBefore(this.launchControl, params.target);\n\n            // Modal window\n            params.target.parentNode.insertBefore(this.modalWindow, params.target);\n\n            // Modal content container\n            this.modalWindow.appendChild(this.modalContent);\n\n            // Close control\n            this.modalContent.appendChild(this.closeControl);\n\n            // Modal title\n            if (this.hasTitle) {\n                this.modalContent.appendChild(this.modalTitle);\n            }\n\n            // Move the content within the modal container\n            this.modalContent.appendChild(params.target);\n\n            // Remove `data-launchy-focusable` from any elements within the\n            // modal content -- we don't want to make these inert\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = Array.from(domFocusable)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var domElement = _step2.value;\n\n                    domElement.removeAttribute(data.launchyAriaHidden);\n                    domElement.removeAttribute(data.launchyFocusable);\n                    domElement.removeAttribute(data.launchyTabIndex);\n                }\n\n                // Overlay\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            document.body.appendChild(this.modalOverlay);\n        }\n\n        /**\n         * Create event listeners for Launchy functionality.\n         *\n         * @return {null}\n         */\n\n    }, {\n        key: 'setupEventListeners',\n        value: function setupEventListeners() {\n\n            // Gather any custom close or refocus controls\n            var closeControls = this.modalContent.querySelectorAll('[' + data.launchyCustom.close + ']');\n            var refocusControls = this.modalContent.querySelectorAll('[' + data.launchyCustom.refocus + ']');\n\n            // Show the modal window on the launcher element `click` event\n            this.launchControl.addEventListener('click', this.showModal.bind(this), false);\n\n            // Hide the modal window on close button or overlay `click` event\n            this.closeControl.addEventListener('click', this.hideModal.bind(this), false);\n            this.modalOverlay.addEventListener('click', this.hideModal.bind(this), false);\n\n            // Trap the keyboard focus within modal window on the document\n            // `focus` event. Notice the use of the `useCapture` flag set to `true`; this\n            // indicates the event will be dispatched to the listener before any event\n            // target in the DOM:\n            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n            document.addEventListener('focus', this.trapFocus.bind(this), true);\n\n            // Check for `esc` key press on the document `keydown` event\n            document.addEventListener('keydown', this.checkEsc.bind(this), false);\n\n            // Check for `shift` key press on the document `keydown` event\n            document.addEventListener('keydown', this.checkShift.bind(this), false);\n\n            // Add event listener for all custom close controls\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = Array.from(closeControls)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var closeControl = _step3.value;\n\n                    closeControl.addEventListener('click', this.hideModal.bind(this), false);\n                }\n\n                // Add event listener for all custom refocus controls\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n                for (var _iterator4 = Array.from(refocusControls)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                    var refocusControl = _step4.value;\n\n                    refocusControl.addEventListener('click', this.hideModalRefocus.bind(this), false);\n                }\n            } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                        _iterator4.return();\n                    }\n                } finally {\n                    if (_didIteratorError4) {\n                        throw _iteratorError4;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Show the modal window.\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n\n    }, {\n        key: 'showModal',\n        value: function showModal(e) {\n            e.preventDefault();\n\n            // Cache the last active element\n            this.activeElement = document.activeElement;\n\n            // Set visible flag as `true`\n            this.modalIsVisible = true;\n\n            // Set the focusable objects, first and last, within the modal window\n            this.allFocusable = this.modalWindow.querySelectorAll(this.focusable);\n            this.firstFocusable = this.allFocusable[0];\n            this.lastFocusable = this.allFocusable[this.allFocusable.length - 1];\n\n            // Add the `active` classes and set `aria-hidden` to `false`\n            this.modalWindow.classList.add(classes.modalWindowIsVisible);\n            this.modalOverlay.classList.add(classes.modalOverlayIsVisible);\n            this.modalWindow.setAttribute('aria-hidden', false);\n\n            // Set focusable elements as \"inert\"\n            this.inertElements(true);\n\n            // Shift keyboard focus to the modal window container\n            this.modalWindow.focus();\n        }\n    }, {\n        key: 'hideModal',\n\n\n        /**\n         * Hide the modal window.\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n        value: function hideModal(e) {\n            e.preventDefault();\n\n            // Set visible flag to `false`\n            this.modalIsVisible = false;\n\n            // Reset the focusable objects\n            this.allFocusable = null;\n            this.firstFocusable = null;\n            this.lastFocusable = null;\n\n            // Remove the `active` classes and set `aria-hidden` to `true`\n            this.modalWindow.classList.remove(classes.modalWindowIsVisible);\n            this.modalOverlay.classList.remove(classes.modalOverlayIsVisible);\n            this.modalWindow.setAttribute('aria-hidden', true);\n\n            // Remove \"inert\" state for focusable elements\n            this.inertElements(false);\n\n            // Set focus to the previous active element\n            this.activeElement.focus();\n        }\n    }, {\n        key: 'trapFocus',\n\n\n        /**\n         * Trap keyboard focus within the modal window.\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n        value: function trapFocus(e) {\n\n            // If the modal is currently visible _and_ the currently focused element\n            // is _not_ within the modal windowâ€¦\n            if (this.modalIsVisible && !this.modalWindow.contains(e.target)) {\n\n                // Stop the event from bubbling any further up into the DOM:\n                // https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\n                e.stopPropagation();\n\n                // If the user is moving forward, focus on the first element,\n                // otherwise, the `shift` key is pressed; focus on the last element\n                this.shiftKeyIsPressed ? this.lastFocusable.focus() : this.firstFocusable.focus();\n            }\n        }\n    }, {\n        key: 'checkEsc',\n\n\n        /**\n         * Check if the `esc` key has been pressed.\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n        value: function checkEsc(e) {\n            if (this.modalIsVisible) {\n\n                // Hide the modal window on `esc` key press\n                if (e.keyCode === keysCodes.Escape) {\n                    this.hideModal(e);\n                }\n            }\n        }\n    }, {\n        key: 'checkShift',\n\n\n        /**\n         * Check if the `shift` key is being being pressed.\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n        value: function checkShift(e) {\n            if (this.modalIsVisible) {\n\n                // Cache the `shift` key state\n                this.shiftKeyIsPressed = e.shiftKey;\n            }\n        }\n    }, {\n        key: 'hideModalRefocus',\n\n\n        /**\n         * Send focus to the specified element `id` on custom refocus element click\n         *\n         * @param {Object} e The event object\n         * @return {null}\n         */\n        value: function hideModalRefocus(e) {\n            var refocusId = e.target.getAttribute(data.launchyCustom.refocus);\n            var refocusElem = document.querySelector('#' + refocusId);\n\n            // Throw an error if the refocus element is not found\n            if (refocusElem == null) {\n                throw Error(strings.refocusElemNotFound + ': #' + refocusId);\n                return;\n            }\n\n            // Hide the modal\n            this.hideModal(e);\n\n            // Send focus to the specified element\n            refocusElem.focus();\n        }\n    }, {\n        key: 'inertElements',\n\n\n        /**\n         * Set all existing focusable elements as \"inert\" -- hide from screen\n         * readers in order to keep focus trapped within modal when using other\n         * forms of keyboard navigation (other than tab).\n         *\n         * @param {Boolean} inert Flag to set elements \"inert\" state\n         * @return {null}\n         */\n        value: function inertElements(inert) {\n\n            // Select all `data-launchy-focusable` elements\n            var domFocusable = document.querySelectorAll('[' + data.launchyFocusable + ']');\n\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = Array.from(domFocusable)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var domElement = _step5.value;\n\n                    domElement.inert = inert;\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n        }\n    }]);\n\n    return Launchy;\n}();\n\nvar init = function init() {\n\n    // Create instances per `data-launchy` elements found in the DOM\n    var launchyElements = document.querySelectorAll(selectors.launchyElements);\n\n    var launchyText = null,\n        launchyTitle = null;\n\n    var _iteratorNormalCompletion6 = true;\n    var _didIteratorError6 = false;\n    var _iteratorError6 = undefined;\n\n    try {\n        for (var _iterator6 = Array.from(launchyElements)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var launchyElement = _step6.value;\n\n            launchyText = launchyElement.getAttribute(data.launchyText), launchyTitle = launchyElement.getAttribute(data.launchyTitle);\n\n            // Throw an error if there's no launcher control text attribute\n            if (!launchyText) {\n                throw Error(strings.modalError);\n                break;\n            }\n\n            // Throw an error if the launcher control text is empty\n            if (launchyText.trim() === '') {\n                throw Error(strings.modalErrorEmpty);\n                break;\n            }\n\n            // Throw a warning if there's no heading title text\n            if (!launchyTitle) {\n                console.warn(strings.modalWarning);\n            }\n\n            // Params object to send to Launchy constructor\n            var params = {\n                target: launchyElement,\n                text: launchyText,\n                title: launchyTitle\n            };\n\n            // Create a new instance for each found in the DOM\n            new Launchy(params);\n        }\n    } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n            }\n        } finally {\n            if (_didIteratorError6) {\n                throw _iteratorError6;\n            }\n        }\n    }\n};\n\ndocument.addEventListener('DOMContentLoaded', init, false);\n\nexports.Launchy = Launchy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!***********************************************!*\
  !*** ./node_modules/wicg-inert/dist/inert.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * Determine if a DOM element matches a CSS selector\n *\n * @param {Element} elem\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction matches(elem, selector) {\n  // Vendor-specific implementations of `Element.prototype.matches()`.\n  var proto = window.Element.prototype;\n  var nativeMatches = proto.matches ||\n      proto.mozMatchesSelector ||\n      proto.msMatchesSelector ||\n      proto.oMatchesSelector ||\n      proto.webkitMatchesSelector;\n\n  if (!elem || elem.nodeType !== 1) {\n    return false;\n  }\n\n  var parentElem = elem.parentNode;\n\n  // use native 'matches'\n  if (nativeMatches) {\n    return nativeMatches.call(elem, selector);\n  }\n\n  // native support for `matches` is missing and a fallback is required\n  var nodes = parentElem.querySelectorAll(selector);\n  var len = nodes.length;\n\n  for (var i = 0; i < len; i++) {\n    if (nodes[i] === elem) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Expose `matches`\n */\n\nvar index = matches;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n\n(function (document) {\n  // Convenience function for converting NodeLists.\n  /** @type {function(number,number):Array} */\n  var slice = Array.prototype.slice;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {Element} rootElement The Element at the root of the inert subtree.\n     * @param {InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      classCallCheck(this, InertRoot);\n\n      /** @type {InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {Element} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {Set<Node>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set([]);\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n\n    createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n        this._observer = null;\n\n        if (this._rootElement) {\n          if (this.hasSavedAriaHidden) {\n            this._rootElement.setAttribute('aria-hidden', this.savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n        this._rootElement = null;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this._managedNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var inertNode = _step.value;\n\n            this._unmanageNode(inertNode.node);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this._managedNodes = null;\n\n        this._inertManager = null;\n      }\n\n      /**\n       * @return {Set<InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n\n    }, {\n      key: '_makeSubtreeUnfocusable',\n\n\n      /**\n       * @param {Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this._visitNode(node);\n        });\n\n        var activeElement = document.activeElement;\n        if (!contains(document.body, startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (contains(startNode, activeElement)) {\n          activeElement.blur();\n        }\n      }\n\n      /**\n       * @param {Node} node\n       */\n\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (node !== this._rootElement && node.hasAttribute('inert')) {\n          this._adoptInertRoot(node);\n        }\n\n        if (index(node, _focusableElementsString) || node.hasAttribute('tabindex')) {\n          this._manageNode(node);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {Node} node\n       */\n\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {Node} node\n       */\n\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes.delete(inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {Node} startNode\n       */\n\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this2 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this2._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {Node} node\n       */\n\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = inertSubroot.managedNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var savedInertNode = _step2.value;\n\n            this._manageNode(savedInertNode.node);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {MutationRecord} records\n       * @param {MutationObserver} self\n       */\n\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = records[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var record = _step3.value;\n\n            var target = record.target;\n            if (record.type === 'childList') {\n              // Manage added nodes\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = slice.call(record.addedNodes)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var node = _step4.value;\n\n                  this._makeSubtreeUnfocusable(node);\n                }\n\n                // Un-manage removed nodes\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = slice.call(record.removedNodes)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var _node = _step5.value;\n\n                  this._unmanageSubtree(_node);\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            } else if (record.type === 'attributes') {\n              if (record.attributeName === 'tabindex') {\n                // Re-initialise inert node if tabindex changes\n                this._manageNode(target);\n              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n                // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n                // already managed nodes from this inert subroot.\n                this._adoptInertRoot(target);\n                var inertSubroot = this._inertManager.getInertRoot(target);\n                var _iteratorNormalCompletion6 = true;\n                var _didIteratorError6 = false;\n                var _iteratorError6 = undefined;\n\n                try {\n                  for (var _iterator6 = this._managedNodes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var managedNode = _step6.value;\n\n                    if (contains(target, managedNode.node)) {\n                      inertSubroot._manageNode(managedNode.node);\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError6 = true;\n                  _iteratorError6 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                      _iterator6.return();\n                    }\n                  } finally {\n                    if (_didIteratorError6) {\n                      throw _iteratorError6;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get$$1() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get$$1() {\n        return '_savedAriaHidden' in this;\n      }\n\n      /** @param {string} ariaHidden */\n\n    }, {\n      key: 'savedAriaHidden',\n      set: function set$$1(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {string} */\n      ,\n      get: function get$$1() {\n        return this._savedAriaHidden;\n      }\n    }]);\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n\n  var InertNode = function () {\n    /**\n     * @param {Node} node A focusable element to be made inert.\n     * @param {InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      classCallCheck(this, InertNode);\n\n      /** @type {Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {Set<InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n\n    createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n\n        if (this._node) {\n          if (this.hasSavedTabIndex) {\n            this._node.setAttribute('tabindex', this.savedTabIndex);\n          } else {\n            this._node.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete this._node.focus;\n          }\n        }\n        this._node = null;\n        this._inertRoots = null;\n\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n\n    }, {\n      key: '_throwIfDestroyed',\n\n\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'ensureUntabbable',\n\n\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        var node = this.node;\n        if (index(node, _focusableElementsString)) {\n          if (node.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n\n          if (node.hasAttribute('tabindex')) {\n            this._savedTabIndex = node.tabIndex;\n          }\n          node.setAttribute('tabindex', '-1');\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            node.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (node.hasAttribute('tabindex')) {\n          this._savedTabIndex = node.tabIndex;\n          node.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.delete(inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get$$1() {\n        return this._destroyed;\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get$$1() {\n        return '_savedTabIndex' in this;\n      }\n\n      /** @return {Node} */\n\n    }, {\n      key: 'node',\n      get: function get$$1() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {number} tabIndex */\n\n    }, {\n      key: 'savedTabIndex',\n      set: function set$$1(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {number} */\n      ,\n      get: function get$$1() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n\n  var InertManager = function () {\n    /**\n     * @param {Document} document\n     */\n    function InertManager(document) {\n      classCallCheck(this, InertManager);\n\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {Map<Node, InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {Map<Node, InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {Element} root\n     * @param {boolean} inert\n     */\n\n\n    createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!contains(this._document.body, root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots.delete(root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {Element} element\n       * @return {InertRoot?}\n       */\n\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {Node} node\n       * @param {InertRoot} inertRoot\n       * @return {InertNode} inertNode\n       */\n\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n          // Update saved tabindex value if necessary\n          inertNode.ensureUntabbable();\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n\n        this._managedNodes.set(node, inertNode);\n\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {Node} node\n       * @param {InertRoot} inertRoot\n       * @return {InertNode?} The potentially destroyed InertNode associated with this node, if any.\n       */\n\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes.delete(node);\n        }\n\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = inertElements[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var inertElement = _step7.value;\n\n            this.setInert(inertElement, true);\n          }\n\n          // Comment this out to use programmatic API only.\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        this._observer.observe(this._document.body, { attributes: true, subtree: true, childList: true });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {MutationRecord} records\n       * @param {MutationObserver} self\n       */\n\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = records[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var record = _step8.value;\n\n            switch (record.type) {\n              case 'childList':\n                var _iteratorNormalCompletion9 = true;\n                var _didIteratorError9 = false;\n                var _iteratorError9 = undefined;\n\n                try {\n                  for (var _iterator9 = slice.call(record.addedNodes)[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                    var node = _step9.value;\n\n                    if (node.nodeType !== Node.ELEMENT_NODE) {\n                      continue;\n                    }\n                    var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                    if (index(node, '[inert]')) {\n                      inertElements.unshift(node);\n                    }\n                    var _iteratorNormalCompletion10 = true;\n                    var _didIteratorError10 = false;\n                    var _iteratorError10 = undefined;\n\n                    try {\n                      for (var _iterator10 = inertElements[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                        var inertElement = _step10.value;\n\n                        this.setInert(inertElement, true);\n                      }\n                    } catch (err) {\n                      _didIteratorError10 = true;\n                      _iteratorError10 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                          _iterator10.return();\n                        }\n                      } finally {\n                        if (_didIteratorError10) {\n                          throw _iteratorError10;\n                        }\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError9 = true;\n                  _iteratorError9 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                      _iterator9.return();\n                    }\n                  } finally {\n                    if (_didIteratorError9) {\n                      throw _iteratorError9;\n                    }\n                  }\n                }\n\n                break;\n              case 'attributes':\n                if (record.attributeName !== 'inert') {\n                  continue;\n                }\n                var target = record.target;\n                var inert = target.hasAttribute('inert');\n                this.setInert(target, inert);\n                break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      }\n    }]);\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {Node} node\n   * @param {(function (Element))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {Element} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = element.shadowRoot || element.webkitShadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  user-select: none;\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n\n  /**\n   * `Node#contains()` polyfill.\n   *\n   * See: http://compatibility.shwups-cms.ch/en/polyfills/?&id=1\n   *\n   * @param {Node} node\n   * @param {Node} other\n   * @return {Boolean}\n   * @public\n   */\n  function contains(node, other) {\n    return other && (node === other || !!(node.compareDocumentPosition(other) & 16));\n  }\n\n  var inertManager = new InertManager(document);\n\n  Object.defineProperty(Element.prototype, 'inert', {\n    enumerable: true,\n    get: function get$$1() {\n      return this.hasAttribute('inert');\n    },\n    set: function set$$1(inert) {\n      inertManager.setInert(this, inert);\n    }\n  });\n})(document);\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!*****************************************!*\
  !*** ./node_modules/focusable/index.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], [contenteditable], audio[controls], video[controls]'\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb2N1c2FibGUvaW5kZXguanM/MmM2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCBbdGFiaW5kZXg9XCIwXCJdLCBbY29udGVudGVkaXRhYmxlXSwgYXVkaW9bY29udHJvbHNdLCB2aWRlb1tjb250cm9sc10nXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mb2N1c2FibGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);